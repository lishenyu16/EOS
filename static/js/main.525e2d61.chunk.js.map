{"version":3,"sources":["assets/Logo_battle.png","Home.module.css","Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","Backdrop","logo","modalImage","question_area","title","question","choices","buttonActive","props","_useState","useState","_useState2","Object","slicedToArray","activeButton","setActiveButton","selectButton","choice","react_default","a","createElement","className","styles","src","logoImage","react_twitch_embed_video_default","channel","layout","height","width","onClick","App","routes","react_router","path","exact","component","to","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oHCCxCH,EAAAC,QAAA,CAAkBG,KAAA,mBAAAC,SAAA,uBAAAC,KAAA,mBAAAC,WAAA,yBAAAC,cAAA,4BAAAC,MAAA,oBAAAC,SAAA,uBAAAC,QAAA,sBAAAC,aAAA,0LCwCHR,EAnCF,SAACS,GAAQ,IAAAC,EACqBC,mBAAS,MAD9BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACXK,EADWH,EAAA,GACEI,EADFJ,EAAA,GAGlB,SAASK,EAAaC,GAClBF,EAAgBE,GAEpB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOvB,MACnBmB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOtB,WACvBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOrB,MACnBiB,EAAAC,EAAAC,cAAA,OAAKG,IAAKC,OAEdN,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOpB,YACnBgB,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAkBO,QAAQ,kBAAkBC,OAAO,QAAQC,OAAO,MAC9DC,MAAM,SAEdX,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOnB,eACnBe,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOlB,OAAvB,cAGAc,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOjB,UAAvB,0CAGAa,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOhB,SAEnBY,EAAAC,EAAAC,cAAA,UAAQU,QAAS,kBAAId,EAAa,MAAMK,UAA0B,MAAfP,EAAmBQ,IAAOf,aAAa,MAA1F,eACAW,EAAAC,EAAAC,cAAA,UAAQU,QAAS,kBAAId,EAAa,MAAMK,UAA0B,MAAfP,EAAmBQ,IAAOf,aAAa,MAA1F,eACAW,EAAAC,EAAAC,cAAA,UAAQU,QAAS,kBAAId,EAAa,MAAMK,UAA0B,MAAfP,EAAmBQ,IAAOf,aAAa,MAA1F,eACAW,EAAAC,EAAAC,cAAA,UAAQU,QAAS,kBAAId,EAAa,MAAMK,UAA0B,MAAfP,EAAmBQ,IAAOf,aAAa,MAA1F,mBCfLwB,EAfH,SAACvB,GAET,IAAIwB,EACAd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACIf,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWrC,IACjCmB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAUI,GAAG,OAGrB,OACInB,EAAAC,EAAAC,cAAA,WACKY,ICFOM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECVNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KAAY3B,EAAAC,EAAAC,cAAC0B,EAAD,OAAsBC,SAASC,eAAe,SDyHpE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.525e2d61.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo_battle.5280bdc6.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"Home_Home__jw9yQ\",\"Backdrop\":\"Home_Backdrop__LDTFO\",\"logo\":\"Home_logo__FfQBi\",\"modalImage\":\"Home_modalImage__1ANaf\",\"question_area\":\"Home_question_area__3SM5m\",\"title\":\"Home_title__xOUz-\",\"question\":\"Home_question__2LilN\",\"choices\":\"Home_choices__2TGcF\",\"buttonActive\":\"Home_buttonActive__8--fe\"};","import React,{useState} from 'react'\nimport styles from './Home.module.css'\nimport logoImage from './assets/Logo_battle.png'\nimport \"../node_modules/video-react/dist/video-react.css\";\nimport TwitchEmbedVideo from \"react-twitch-embed-video\"\n\nconst Home = (props)=>{\n    const [activeButton,setActiveButton] = useState(null)\n\n    function selectButton(choice){\n        setActiveButton(choice)\n    }\n    return (\n        <div className={styles.Home}>\n            <div className={styles.Backdrop}></div>\n            <div className={styles.logo}>\n                <img src={logoImage}></img>\n            </div>\n            <div className={styles.modalImage}>\n                <TwitchEmbedVideo channel=\"talk2megooseman\" layout=\"video\" height=\"400\"\n                    width=\"550\" />\n            </div>\n            <div className={styles.question_area}>\n                <div className={styles.title}>\n                    Question 1\n                </div>\n                <div className={styles.question}>\n                    what is the symbol for EOS blockchain?\n                </div>\n                <div className={styles.choices}>\n                    {/* <button onClick={()=>selectRange('1d')} className={activeRange==='1d'?styles.RangeChoiceActive:null}>1d</button> */}\n                    <button onClick={()=>selectButton('1')} className={activeButton==='1'?styles.buttonActive:null}>Chesthedron</button>\n                    <button onClick={()=>selectButton('2')} className={activeButton==='2'?styles.buttonActive:null}>Chesthedron</button>\n                    <button onClick={()=>selectButton('3')} className={activeButton==='3'?styles.buttonActive:null}>Chesthedron</button>\n                    <button onClick={()=>selectButton('4')} className={activeButton==='4'?styles.buttonActive:null}>Chesthedron</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Home","import React from 'react';\nimport {Route, Switch, Redirect} from 'react-router-dom'\nimport Home from './Home'\n\nconst App = (props)=>{\n\n    let routes = (\n        <Switch>\n            <Route path=\"/\" exact component={Home}></Route>\n            <Redirect to='/' />\n        </Switch>\n    )\n    return (\n        <div>\n            {routes}\n        </div>\n    );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from 'react-router-dom'\n\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}